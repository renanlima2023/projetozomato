"""
M√≥dulo de visualiza√ß√£o de dados por pa√≠ses do dashboard Elegant Restaurant.

Este m√≥dulo fornece uma interface visual para an√°lise de dados de restaurantes
agrupados por pa√≠s, incluindo:
- M√©tricas gerais por pa√≠s
- Visualiza√ß√£o geogr√°fica de restaurantes
- An√°lises comparativas entre pa√≠ses

O m√≥dulo utiliza Streamlit para criar a interface e Plotly para as visualiza√ß√µes.
"""
import pandas as pd
import numpy as np
import streamlit as st
from haversine import haversine
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from PIL import Image
import folium
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster

st.set_page_config(
    page_title='Home', 
    page_icon='üè†', 
    )   

df = pd.read_csv('dataset\zomato.csv')



# Fun√ß√µes de tratamento
def country_name(country_id):
    """
    Converte o c√≥digo do pa√≠s em seu nome correspondente.

    Parameters
    ----------
    country_id : int
        C√≥digo num√©rico que identifica o pa√≠s.

    Returns
    -------
    str
        Nome do pa√≠s correspondente ao c√≥digo. Retorna "Unknown" se o c√≥digo n√£o for encontrado.

    Examples
    --------
    >>> country_name(1)
    'India'
    >>> country_name(999)
    'Unknown'
    """
    COUNTRIES = {
        1: "India", 14: "Australia", 30: "Brazil", 37: "Canada", 94: "Indonesia", 
        148: "New Zeland", 162: "Philippines", 166: "Qatar", 184: "Singapure", 
        189: "South Africa", 191: "Sri Lanka", 208: "Turkey", 214: "United Arab Emirates", 
        215: "England", 216: "United States of America",
    }
    return COUNTRIES.get(country_id, "Unknown")
def format_number(num):
    """
    Formata um n√∫mero para uma string mais leg√≠vel usando sufixos K e M.

    Parameters
    ----------
    num : int ou float
        N√∫mero a ser formatado.

    Returns
    -------
    str
        N√∫mero formatado com sufixo K para milhares ou M para milh√µes.

    Examples
    --------
    >>> format_number(1500)
    '1.5K'
    >>> format_number(1500000)
    '1.5M'
    >>> format_number(500)
    '500'
    """
    if num >= 1_000_000:
        return f"{num / 1_000_000:.1f}M"  # Exibe em milh√µes
    elif num >= 1_000:
        return f"{num / 1_000:.1f}K"  # Exibe em milhares
    else:
        return str(num)  # Retorna como string se for menor que mil

def create_price_type(price_range):
    """
    Converte o valor num√©rico da faixa de pre√ßo em uma categoria descritiva.

    Parameters
    ----------
    price_range : int
        Valor num√©rico de 1 a 4 representando a faixa de pre√ßo.

    Returns
    -------
    str
        Categoria de pre√ßo correspondente:
        - 1: "cheap"
        - 2: "normal"
        - 3: "expensive"
        - 4: "gourmet"

    Examples
    --------
    >>> create_price_type(1)
    'cheap'
    >>> create_price_type(4)
    'gourmet'
    """
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"

def color_name(color_code):
    """
    Converte o c√≥digo hexadecimal da cor em um nome descritivo.

    Parameters
    ----------
    color_code : str
        C√≥digo hexadecimal da cor (sem o #).

    Returns
    -------
    str
        Nome descritivo da cor. Retorna "unknown" se o c√≥digo n√£o for encontrado.

    Examples
    --------
    >>> color_name("3F7E00")
    'darkgreen'
    >>> color_name("INVALID")
    'unknown'
    """
    COLORS = {
        "3F7E00": "darkgreen", "5BA829": "green", "9ACD32": "lightgreen",
        "CDD614": "orange", "FFBA00": "red", "CBCBC8": "darkred", "FF7800": "darkred",
    }
    return COLORS.get(color_code, "unknown")

def rename_columns(dataframe):
    """
    Renomeia as colunas do DataFrame para o formato snake_case.

    Parameters
    ----------
    dataframe : pandas.DataFrame
        DataFrame cujas colunas ser√£o renomeadas.

    Returns
    -------
    pandas.DataFrame
        C√≥pia do DataFrame com as colunas renomeadas em formato snake_case.

    Examples
    --------
    >>> df = pd.DataFrame(columns=['First Name', 'Last Name'])
    >>> rename_columns(df).columns
    Index(['first_name', 'last_name'], dtype='object')
    """
    df = dataframe.copy()
    df.columns = df.columns.str.lower().str.replace(' ', '_')
    return df

# 1. Remo√ß√£o de duplicatas
df = df.drop_duplicates(subset='Restaurant ID')


# 2. Tratamento de valores nulos
df['Cuisines'] = df['Cuisines'].fillna('Not Informed')
df['Rating text'] = df['Rating text'].fillna('Not Rated')
df['Average Cost for two'] = df['Average Cost for two'].fillna(0)

# 3. Convers√£o de tipos
df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')
df['Average Cost for two'] = pd.to_numeric(df['Average Cost for two'], errors='coerce')
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# 4. Substitui√ß√£o de c√≥digos por nomes
df['country_name'] = df['Country Code'].apply(country_name)
df['Price Category'] = df['Price range'].apply(create_price_type)
df['Color Name'] = df['Rating color'].apply(color_name)


# 5. Tratamento da coluna Cuisines (pegando apenas a primeira culin√°ria)
df['Cuisines'] = df['Cuisines'].apply(lambda x: str(x).split(',')[0].strip())

# 6. Renomea√ß√£o das colunas para snake_case
df = rename_columns(df)
# Ap√≥s renomea√ß√£o, ajuste o nome da coluna 'country_name' para 'country'
df.rename(columns={'country_name': 'country'}, inplace=True)

# 7. Remo√ß√£o de colunas redundantes ou desnecess√°rias
colunas_para_remover = ['country_code', 'rating_color', 'switch_to_order_menu']
df = df.drop(columns=colunas_para_remover)

# 8. Ordena√ß√£o do dataframe
df = df.sort_values('restaurant_id')

# 9. Reset do √≠ndice
df = df.reset_index(drop=True)

# Verifica√ß√£o dos dados tratados
#print("Shape ap√≥s tratamento:", df.shape)
#print("\nInforma√ß√µes do DataFrame:")
#print(df.info())





#==================================
# Barra Lateral Streamlit
#==================================


# Carregar e exibir a imagem na barra lateral
#image_path = r'C:\Users\renan\OneDrive\DS\python\projetozomato\images\logo.jpg'
image = Image.open('logo.jpg')
st.sidebar.image(image, width=120)

# Exibir texto na barra lateral
st.sidebar.markdown('### Elegant Restaurant')
st.sidebar.markdown('## Food Experience')
st.sidebar.markdown("""---""")


options = ['Todos os Pa√≠ses'] + sorted(df['country'].unique())
# Filtro de sele√ß√£o de pa√≠s na barra lateral
paises_selectbox = st.sidebar.selectbox(
    'Selecione o Pa√≠s',
    options=options, 
    index=0  # "Todos" ser√° a primeira op√ß√£o
)



#==================================
# Layout Streamlit
#==================================

with st.container():
    st.title('Elegant Restaurant')
    st.markdown('## Aqui voc√™ encontra os melhores restaurantes!')
    st.markdown("""---""")

    col1, col2, col3, col4, col5 = st.columns([2.2, 2, 2, 2,3 ], gap='large')  # Aumenta a largura da coluna 4

    
    with col1:
        #Restaurantes cadastrados.
        restaurantes_cadastrados = int(df['restaurant_id'].nunique())
        col1.metric('Restaurantes', restaurantes_cadastrados)
        
    with col2:
        #Pa√≠ses cadastrados.
        paises_cadastrados = int(df['country'].nunique())
        col2.metric('Pa√≠ses', paises_cadastrados)
        
    with col3:
        #Cidades cadastradas.
        cidades_cadastradas = int(df['city'].nunique())
        col3.metric('Cidades', cidades_cadastradas)
        
    with col4:
        # Avalia√ß√µes feitas.
        avaliacoes_zomato = df['votes'].sum()
        formatted_votes = format_number(int(avaliacoes_zomato))
        col4.metric('Avalia√ß√µes', formatted_votes)
        
    with col5:
        #Tipos de culin√°rias.
        tipos_culinarias = int(df['cuisines'].nunique())
        col5.metric('Tipos de culin√°rias', tipos_culinarias)
        
with st.container():
    st.markdown("""---""")
    st.markdown("### Country Maps")
    
    # Filtra o DataFrame para o pa√≠s selecionado no selectbox
    if paises_selectbox == 'Todos os Pa√≠ses':
        df_pais = df  # Se "Todos os Pa√≠ses" estiver selecionado, use todo o DataFrame
    else:
        df_pais = df.loc[df['country'] == paises_selectbox, :]

    # Contagem de restaurantes no pa√≠s selecionado
    total_restaurantes = df_pais.shape[0]

    # Inicia o mapa centralizado no pa√≠s selecionado (m√©dia das localiza√ß√µes)
    if not df_pais.empty:
        central_location = [df_pais['latitude'].mean(), df_pais['longitude'].mean()]
        mapa = folium.Map(location=central_location, zoom_start=5)

        # Cluster de marcadores para agrupar os pontos dos restaurantes
        marker_cluster = MarkerCluster().add_to(mapa)
        
        # Adiciona marcadores para cada restaurante no pa√≠s filtrado
        for index, location_info in df_pais.iterrows():
            folium.Marker(
                location=[location_info['latitude'], location_info['longitude']],
                popup=f"{location_info['restaurant_name']}",
                icon=folium.Icon(color='blue', icon='info-sign')
            ).add_to(marker_cluster)

        # Adiciona marcador central com a contagem de restaurantes no pa√≠s
        folium.Marker(
            location=central_location,
            popup=f"Total de restaurantes em {paises_selectbox}: {total_restaurantes}",
            icon=folium.Icon(color='red', icon='info-sign')
        ).add_to(mapa)

        # Exibe o mapa no Streamlit
        folium_static(mapa, width=1024, height=600)
    else:
        st.write("Nenhum restaurante encontrado para o pa√≠s selecionado.")

       


