import pandas as pd
import numpy as np
import streamlit as st
from haversine import haversine
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from PIL import Image
import folium
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster

st.set_page_config(
    page_title='Pa√≠ses', 
    page_icon='üåç', 
    layout='wide'
    )

df = pd.read_csv('dataset\zomato.csv')





# Fun√ß√µes de tratamento
def country_name(country_id):
    COUNTRIES = {
        1: "India", 14: "Australia", 30: "Brazil", 37: "Canada", 94: "Indonesia", 
        148: "New Zeland", 162: "Philippines", 166: "Qatar", 184: "Singapure", 
        189: "South Africa", 191: "Sri Lanka", 208: "Turkey", 214: "United Arab Emirates", 
        215: "England", 216: "United States of America",
    }
    return COUNTRIES.get(country_id, "Unknown")

def create_price_type(price_range):
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"

def color_name(color_code):
    COLORS = {
        "3F7E00": "darkgreen", "5BA829": "green", "9ACD32": "lightgreen",
        "CDD614": "orange", "FFBA00": "red", "CBCBC8": "darkred", "FF7800": "darkred",
    }
    return COLORS.get(color_code, "unknown")

def rename_columns(dataframe):
    df = dataframe.copy()
    df.columns = df.columns.str.lower().str.replace(' ', '_')
    return df

# 1. Remo√ß√£o de duplicatas
df = df.drop_duplicates(subset='Restaurant ID')

# 2. Tratamento de valores nulos
df['Cuisines'] = df['Cuisines'].fillna('Not Informed')
df['Rating text'] = df['Rating text'].fillna('Not Rated')
df['Average Cost for two'] = df['Average Cost for two'].fillna(0)

# 3. Convers√£o de tipos
df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')
df['Average Cost for two'] = pd.to_numeric(df['Average Cost for two'], errors='coerce')
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# 4. Substitui√ß√£o de c√≥digos por nomes
df['country_name'] = df['Country Code'].apply(country_name)
df['Price Category'] = df['Price range'].apply(create_price_type)
df['Color Name'] = df['Rating color'].apply(color_name)


# 5. Tratamento da coluna Cuisines (pegando apenas a primeira culin√°ria)
df['Cuisines'] = df['Cuisines'].apply(lambda x: str(x).split(',')[0].strip())

# 6. Renomea√ß√£o das colunas para snake_case
df = rename_columns(df)
# Ap√≥s renomea√ß√£o, ajuste o nome da coluna 'country_name' para 'country'
df.rename(columns={'country_name': 'country'}, inplace=True)

# 7. Remo√ß√£o de colunas redundantes ou desnecess√°rias
colunas_para_remover = ['country_code', 'rating_color', 'switch_to_order_menu']
df = df.drop(columns=colunas_para_remover)

# 8. Ordena√ß√£o do dataframe
df = df.sort_values('restaurant_id')

# 9. Reset do √≠ndice
df = df.reset_index(drop=True)

# Verifica√ß√£o dos dados tratados
#print("Shape ap√≥s tratamento:", df.shape)
#print("\nInforma√ß√µes do DataFrame:")
#print(df.info())



#==================================
# Barra Lateral Streamlit
#==================================
st.header(' üåç Pa√≠ses')


# Carregar e exibir a imagem na barra lateral
#image_path = r'C:\Users\renan\OneDrive\DS\python\projetozomato\images\logo.jpg'
image = Image.open('logo.jpg')
st.sidebar.image(image, width=120)

# Exibir texto na barra lateral
st.sidebar.markdown('### Elegant Restaurant')
st.sidebar.markdown('## Food Experience')
st.sidebar.markdown("""---""")

options = ['Todos os Pa√≠ses'] + sorted(df['country'].unique())

# Filtro de sele√ß√£o de pa√≠s na barra lateral
paises_selectbox = st.sidebar.selectbox(
    'Selecione o Pa√≠s',
    options=options, 
    index=0  # "Todos" ser√° a primeira op√ß√£o
)



#==================================
# Layout Streamlit
#==================================

with st.container():
    st.markdown("""---""")
    col1, col2= st.columns(2, gap='large')
    

    with col1:
        
        # Contagem de restaurantes por pa√≠s e sele√ß√£o dos 6 maiores
        country_counts = df['country'].value_counts().reset_index()
        country_counts.columns = ['Pa√≠s', 'Quantidade de Restaurantes']
        country_counts = country_counts.sort_values('Quantidade de Restaurantes', ascending=False).head(6)  # Mant√©m apenas os 6 primeiros

# ==================================
# Gr√°fico de Barras com Plotly Express
# ==================================
fig = px.bar(
    country_counts,
    x='Pa√≠s',
    y='Quantidade de Restaurantes',
    text='Quantidade de Restaurantes',  # Adiciona os n√∫meros dentro das barras
    labels={'Pa√≠s': 'Pa√≠s', 'Quantidade de Restaurantes': 'Quantidade de Restaurantes'},
    title='Quantidade de Restaurantes Registrados por Pa√≠s'
)

# Customiza√ß√£o para aproximar do visual da imagem
fig.update_traces(
    marker_color='blue',  # Cor das barras
    marker_line_color='black',  # Cor da borda das barras
    marker_line_width=1.5,  # Largura da borda
    textposition='outside'  # Posi√ß√£o do texto fora das barras
)

fig.update_layout(
    plot_bgcolor='rgb(22,31,44)',  # Cor de fundo do gr√°fico
    paper_bgcolor='rgb(22,31,44)',  # Cor de fundo fora do gr√°fico
    font=dict(color='white'),  # Cor do texto
    title_font=dict(size=18, color='white', family="Arial"),
    xaxis=dict(title='', color='white', showgrid=False),  # Remove t√≠tulo do eixo x e grades
    yaxis=dict(title='', color='white', showgrid=False)  # Remove t√≠tulo do eixo y e grades
)

# ==================================
# Exibi o gr√°fico no Streamlit
# ==================================
st.plotly_chart(fig, use_container_width=True)

with col2:
    
    # Contagem de cidades √∫nicas por pa√≠s e sele√ß√£o dos 6 maiores
    
    city_counts = df.groupby('country')['city'].nunique().reset_index()
    city_counts.columns = ['Pa√≠s', 'Quantidade de Cidades']
    city_counts = city_counts.sort_values('Quantidade de Cidades', ascending=False).head(6)  # Mant√©m apenas os 6 primeiros

# ==================================
# Gr√°fico de Barras com Plotly Express
# ==================================
fig = px.bar(
    city_counts,
    x='Pa√≠s',
    y='Quantidade de Cidades',
    text='Quantidade de Cidades',  # Adiciona os n√∫meros dentro das barras
    labels={'Pa√≠s': 'Pa√≠s', 'Quantidade de Cidades': 'Quantidade de Cidades'},
    title='Quantidade de Cidades Registradas por Pa√≠s'
)

# Customiza√ß√£o para aproximar do visual da imagem
fig.update_traces(
    marker_color='blue',  # Cor das barras
    marker_line_color='black',  # Cor da borda das barras
    marker_line_width=1.5,  # Largura da borda
    textposition='outside'  # Posi√ß√£o do texto fora das barras
)

fig.update_layout(
    plot_bgcolor='rgb(22,31,44)',  # Cor de fundo do gr√°fico
    paper_bgcolor='rgb(22,31,44)',  # Cor de fundo fora do gr√°fico
    font=dict(color='white'),  # Cor do texto
    title_font=dict(size=18, color='white', family="Arial"),
    xaxis=dict(title='', color='white', showgrid=False),  # Remove t√≠tulo do eixo x e grades
    yaxis=dict(title='', color='white', showgrid=False)  # Remove t√≠tulo do eixo y e grades
)

# ==================================
# Exibir o gr√°fico no Streamlit
# ==================================
st.plotly_chart(fig, use_container_width=True)

with st.container():
    st.markdown("""---""")
    col1, col2= st.columns(2, gap='large')      

    with col1:
        #M√©dia de avalia√ß√µes feitas por pa√≠s
        
  
  
# C√°lculo da m√©dia de avalia√ß√µes por pa√≠s
        average_votes = df.groupby('country')['votes'].mean().reset_index()
        average_votes.columns = ['Pa√≠s', 'M√©dia de Avalia√ß√µes']

        # Mant√©m apenas os 6 pa√≠ses com as maiores m√©dias de avalia√ß√µes
    average_votes = average_votes.sort_values('M√©dia de Avalia√ß√µes', ascending=False).head(6)

# Cria√ß√£o do gr√°fico de barras
fig = px.bar(
    average_votes,
    x='Pa√≠s',
    y='M√©dia de Avalia√ß√µes',
    text='M√©dia de Avalia√ß√µes',
    labels={'Pa√≠s': 'Pa√≠s', 'M√©dia de Avalia√ß√µes': 'M√©dia de Avalia√ß√µes'},
    title='M√©dia de Avalia√ß√µes Feitas por Pa√≠s '
)

# Customiza√ß√£o do gr√°fico
fig.update_traces(
    
    marker_color='blue',  # Cor das barras
    marker_line_color='black',  # Cor da borda das barras
    marker_line_width=1.5,  # Largura da borda
    textposition='outside'  # Posi√ß√£o do texto fora das barras
)

fig.update_layout(
    plot_bgcolor='rgb(22,31,44)',  # Cor de fundo do gr√°fico
    paper_bgcolor='rgb(22,31,44)',  # Cor de fundo fora do gr√°fico
    font=dict(color='white'),  # Cor do texto
    title_font=dict(size=18, color='white', family="Arial"),
    xaxis=dict(title='', color='white', showgrid=False),  # Remove t√≠tulo do eixo x e grades
    yaxis=dict(title='', color='white', showgrid=False)  # Remove t√≠tulo do eixo y e grades
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig, use_container_width=True)


with col2:
        # M√©dia de pre√ßo de um prato para duas pessoas por pa√≠s.
        
    # C√°lculo da m√©dia do pre√ßo de um prato para duas pessoas por pa√≠s
    average_cost = df.groupby('country')['average_cost_for_two'].mean().reset_index()
    average_cost.columns = ['Pa√≠s', 'M√©dia de Pre√ßo para Duas Pessoas']

# Mant√©m apenas os 6 pa√≠ses com as maiores m√©dias de pre√ßo
    average_cost = average_cost.sort_values('M√©dia de Pre√ßo para Duas Pessoas', ascending=False).head(6)

# Cria√ß√£o do gr√°fico de barras
fig_cost = px.bar(
    average_cost,
    x='Pa√≠s',
    y='M√©dia de Pre√ßo para Duas Pessoas',
    text='M√©dia de Pre√ßo para Duas Pessoas',
    labels={'Pa√≠s': 'Pa√≠s', 'M√©dia de Pre√ßo para Duas Pessoas': 'M√©dia de Pre√ßo'},
    title='M√©dia de Pre√ßo de um Prato para Duas Pessoas por Pa√≠s '
)

# Customiza√ß√£o do gr√°fico
fig_cost.update_traces(
    marker_color='blue',  # Cor das barras
    marker_line_color='black',  # Cor da borda das barras
    marker_line_width=1.5,  # Largura da borda
    textposition='outside'  # Posi√ß√£o do texto fora das barras
)

fig_cost.update_layout(
    plot_bgcolor='rgb(22,31,44)',  # Cor de fundo do gr√°fico
    paper_bgcolor='rgb(22,31,44)',  # Cor de fundo fora do gr√°fico
    font=dict(color='white'),  # Cor do texto
    title_font=dict(size=18, color='white', family="Arial"),
    xaxis=dict(title='', color='white', showgrid=False),  # Remove t√≠tulo do eixo x e grades
    yaxis=dict(title='', color='white', showgrid=False)  # Remove t√≠tulo do eixo y e grades
)

# Exibir o gr√°fico no Streamlit
st.plotly_chart(fig_cost, use_container_width=True)
    

