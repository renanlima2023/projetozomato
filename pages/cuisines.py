import pandas as pd
import numpy as np
import random
import streamlit as st
from haversine import haversine
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from PIL import Image
import folium
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster

st.set_page_config(
    page_title='Cozinhas', 
    page_icon='üçΩÔ∏è', 
    layout='wide'
    )

df = pd.read_csv('dataset/zomato.csv')



# Fun√ß√µes de tratamento
def country_name(country_id):
    COUNTRIES = {
        1: "India", 14: "Australia", 30: "Brazil", 37: "Canada", 94: "Indonesia", 
        148: "New Zeland", 162: "Philippines", 166: "Qatar", 184: "Singapure", 
        189: "South Africa", 191: "Sri Lanka", 208: "Turkey", 214: "United Arab Emirates", 
        215: "England", 216: "United States of America",
    }
    return COUNTRIES.get(country_id, "Unknown")

def create_price_type(price_range):
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"

def color_name(color_code):
    COLORS = {
        "3F7E00": "darkgreen", "5BA829": "green", "9ACD32": "lightgreen",
        "CDD614": "orange", "FFBA00": "red", "CBCBC8": "darkred", "FF7800": "darkred",
    }
    return COLORS.get(color_code, "unknown")

def rename_columns(dataframe):
    df = dataframe.copy()
    df.columns = df.columns.str.lower().str.replace(' ', '_')
    return df

# 1. Remo√ß√£o de duplicatas
df = df.drop_duplicates(subset='Restaurant ID')


# 2. Tratamento de valores nulos
df['Cuisines'] = df['Cuisines'].fillna('Not Informed')
df['Rating text'] = df['Rating text'].fillna('Not Rated')
df['Average Cost for two'] = df['Average Cost for two'].fillna(0)

# 3. Convers√£o de tipos
df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')
df['Average Cost for two'] = pd.to_numeric(df['Average Cost for two'], errors='coerce')
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# 4. Substitui√ß√£o de c√≥digos por nomes
df['country_name'] = df['Country Code'].apply(country_name)
df['Price Category'] = df['Price range'].apply(create_price_type)
df['Color Name'] = df['Rating color'].apply(color_name)


# 5. Tratamento da coluna Cuisines (pegando apenas a primeira culin√°ria)
df['Cuisines'] = df['Cuisines'].apply(lambda x: str(x).split(',')[0].strip())

# 6. Renomea√ß√£o das colunas para snake_case
df = rename_columns(df)
# Ap√≥s renomea√ß√£o, ajuste o nome da coluna 'country_name' para 'country'
df.rename(columns={'country_name': 'country'}, inplace=True)

# 7. Remo√ß√£o de colunas redundantes ou desnecess√°rias
colunas_para_remover = ['country_code', 'rating_color', 'switch_to_order_menu']
df = df.drop(columns=colunas_para_remover)

# 8. Ordena√ß√£o do dataframe
df = df.sort_values('restaurant_id')

# 9. Reset do √≠ndice
df = df.reset_index(drop=True)

# Verifica√ß√£o dos dados tratados
#print("Shape ap√≥s tratamento:", df.shape)
#print("\nInforma√ß√µes do DataFrame:")
#print(df.info())




#==================================
# Barra Lateral Streamlit
#==================================
st.header(' üçΩÔ∏èCozinhas')


# Carregar e exibir a imagem na barra lateral
#image_path = r'C:\Users\renan\OneDrive\DS\python\projetozomato\images\logo.jpg'
image = Image.open('logo.jpg')
st.sidebar.image(image, width=120)

# Exibir texto na barra lateral
st.sidebar.markdown('### Elegant Restaurant')
st.sidebar.markdown('## Food Experience')
st.sidebar.markdown("""---""")

options = ['Todos os Pa√≠ses'] + sorted(df['country'].unique())
# Filtro de sele√ß√£o de pa√≠s na barra lateral
paises_selectbox = st.sidebar.selectbox(
    'Selecione o Pa√≠s',
    options=options, 
    index=0  # "Todos" ser√° a primeira op√ß√£o
)

# Slider de sele√ß√£o de quantidade de restaurantes
quantidade_restaurantes = st.sidebar.slider(
    'Selecione a quantidade de restaurantes',
    min_value=1,
    max_value=20,
    value=10
)

# Obt√©m as op√ß√µes de culin√°ria
cuisine_options = sorted(df['cuisines'].unique())

# Filtra as melhores culin√°rias com base nas avalia√ß√µes
best_rated_cuisines = df.loc[df.groupby('cuisines')['aggregate_rating'].idxmax()]
top_cuisines = best_rated_cuisines.nlargest(5, 'aggregate_rating')['cuisines'].tolist()

# Seleciona as melhores como padr√£o
default_selection = top_cuisines

# Selecionar os tipos de culin√°ria
culinarias_selectbox = st.sidebar.multiselect(
    'Selecione os tipos de culin√°ria',
    options=cuisine_options,
    default=default_selection  # As melhores culin√°rias s√£o selecionadas por padr√£o
)

#==================================
# Layout Streamlit
#==================================

with st.container():
    st.markdown('#### Aqui voc√™ encotras os principais tipos de culin√°ria dos melhores restaurantes!')
    st.markdown("""---""")



# Filtra o DataFrame com base nas sele√ß√µes do usu√°rio
if culinarias_selectbox:
    # Filtra por pa√≠s se n√£o for "Todos os Pa√≠ses"
    if paises_selectbox != 'Todos os Pa√≠ses':
        filtered_restaurants = df[(df['country'] == paises_selectbox) & (df['cuisines'].isin(culinarias_selectbox))]
    else:
        filtered_restaurants = df[df['cuisines'].isin(culinarias_selectbox)]
    
    # Encontra as melhores avalia√ß√µes por culin√°ria nas op√ß√µes filtradas
    if not filtered_restaurants.empty:
        best_rated_cuisines = filtered_restaurants.loc[filtered_restaurants.groupby('cuisines')['aggregate_rating'].idxmax()]
        
        # Ordena as culin√°rias por avalia√ß√£o e seleciona as 5 melhores
        top_cuisines = best_rated_cuisines.nlargest(5, 'aggregate_rating')
        
        # Cria 5 colunas para exibir a melhor avalia√ß√£o de cada culin√°ria
        col1, col2, col3, col4, col5 = st.columns(5, gap='large')

        # Exibe cada culin√°ria e sua nota na coluna correspondente
        with col1:
            if not top_cuisines.empty:
                cuisine1 = top_cuisines.iloc[0]
                st.markdown(f"**Culin√°ria {cuisine1['cuisines']}**: {cuisine1['restaurant_name']} - {cuisine1['aggregate_rating']}/5.0")
            else:
                st.markdown("**Culin√°ria 1**: Nenhum restaurante encontrado")

        with col2:
            if len(top_cuisines) > 1:
                cuisine2 = top_cuisines.iloc[1]
                st.markdown(f"**Culin√°ria {cuisine2['cuisines']}**: {cuisine2['restaurant_name']} - {cuisine2['aggregate_rating']}/5.0")
            else:
                st.markdown("**Culin√°ria 2**: Nenhum restaurante encontrado")

        with col3:
            if len(top_cuisines) > 2:
                cuisine3 = top_cuisines.iloc[2]
                st.markdown(f"**Culin√°ria {cuisine3['cuisines']}**: {cuisine3['restaurant_name']} - {cuisine3['aggregate_rating']}/5.0")
            else:
                st.markdown("**Culin√°ria 3**: Nenhum restaurante encontrado")

        with col4:
            if len(top_cuisines) > 3:
                cuisine4 = top_cuisines.iloc[3]
                st.markdown(f"**Culin√°ria {cuisine4['cuisines']}**: {cuisine4['restaurant_name']} - {cuisine4['aggregate_rating']}/5.0")
            else:
                st.markdown("**Culin√°ria 4**: Nenhum restaurante encontrado")

        with col5:
            if len(top_cuisines) > 4:
                cuisine5 = top_cuisines.iloc[4]
                st.markdown(f"**Culin√°ria {cuisine5['cuisines']}**: {cuisine5['restaurant_name']} - {cuisine5['aggregate_rating']}/5.0")
            else:
                st.markdown("**Culin√°ria 5**: Nenhum restaurante encontrado")
    else:
        st.markdown("Nenhum restaurante encontrado com os filtros aplicados.")
else:
    st.markdown("Por favor, selecione ao menos uma culin√°ria.")


# Mostra os 10 melhores restaurantes sem depender do top_cuisines
with st.container():
    st.markdown("""---""")
    
    # Define o t√≠tulo com base na quantidade de restaurantes a serem exibidos
    st.markdown(f"### Top {quantidade_restaurantes} Melhores Restaurantes:")

    # Aplica o filtro de pa√≠s se selecionado
    if paises_selectbox != 'Todos os Pa√≠ses':
        # Filtra para o pa√≠s selecionado
        filtered_restaurants = df[df['country'] == paises_selectbox]
    else:
        # Se "Todos os Pa√≠ses" estiver selecionado, use o DataFrame completo
        filtered_restaurants = df

    # Filtra os melhores restaurantes de acordo com a avalia√ß√£o
    best_overall = filtered_restaurants.nlargest(quantidade_restaurantes, 'aggregate_rating')

    # Verifica se h√° restaurantes dispon√≠veis ap√≥s o filtro
    if best_overall.empty:
        st.markdown("Nenhum restaurante encontrado para o pa√≠s selecionado.")
    else:
        # Mostra as colunas desejadas
        st.dataframe(best_overall[['restaurant_name', 'country', 'city', 'cuisines', 'average_cost_for_two', 'aggregate_rating']])

    
with st.container():
    st.markdown("""---""")
    st.markdown("### Top 10 Melhores Tipos de Culin√°ria:")
    
    # Calcula a m√©dia de avalia√ß√£o por culin√°ria e arredonda para 1 casa decimal
    average_ratings = df.groupby('cuisines', as_index=False)['aggregate_rating'].mean().round(1)
    
    # Seleciona as 10 melhores culin√°rias com base na m√©dia de avalia√ß√£o
    top_cuisines = average_ratings.nlargest(10, 'aggregate_rating')     
    
    # Verifica se h√° culin√°rias suficientes para exibir
    if top_cuisines.empty:
        st.markdown("Nenhuma culin√°ria encontrada.")
    else:
        # Cria o gr√°fico
        fig = px.bar(
            top_cuisines, 
            x='cuisines', 
            y='aggregate_rating', 
            text='aggregate_rating', 
            color='aggregate_rating', 
            title='Top 10 Melhores Tipos de Culin√°ria (Baseado na M√©dia de Avalia√ß√£o)'
        )
        
        # Arredonda os valores exibidos no gr√°fico para uma casa decimal
        fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
        
        st.plotly_chart(fig, use_container_width=True)


  

with st.container():
    st.markdown("""---""")
    st.markdown("### Top 10 Piores Tipos de Culin√°ria:")
    
    # Calcula a m√©dia de avalia√ß√£o por culin√°ria e arredonda para 1 casa decimal
    average_ratings = df.groupby('cuisines', as_index=False)['aggregate_rating'].mean().round(1)
    
    # Seleciona as 10 piores culin√°rias com base na m√©dia de avalia√ß√£o
    bottom_cuisines = average_ratings.nsmallest(10, 'aggregate_rating')
    
    # Verifica se h√° culin√°rias suficientes para exibir
    if bottom_cuisines.empty:
        st.markdown("Nenhuma culin√°ria encontrada.")
    else:
        # Cria o gr√°fico com cores modificadas
        fig = px.bar(
            bottom_cuisines, 
            x='cuisines', 
            y='aggregate_rating', 
            text='aggregate_rating', 
            color='aggregate_rating', 
            title='Top 10 Piores Tipos de Culin√°ria',
            color_continuous_scale=px.colors.sequential.Reds  # Usando a paleta de cores vermelha
        )
        
        # Arredonda os valores exibidos no gr√°fico para uma casa decimal
        fig.update_traces(texttemplate='%{text:.1f}', textposition='outside')
        
        st.plotly_chart(fig, use_container_width=True)



